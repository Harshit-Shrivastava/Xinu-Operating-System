#########################################################################
#									#
#									#
#  Makefile for the Xinu operating system                               #
#									#
#  includes: .deps and .defs						#
#									#
#									#
#########################################################################
include Makedefs

NODE=0
GPORT=556${NODE}

ifndef PLATFORM
$(error PLATFORM is not set. Edit your Makedefs file and add 'PLATFORM=arm-qemu'or 'PLATFORM=arm-bbb')
endif

ifeq ($(PLATFORM),arm-qemu)
	PLAT_CFLAGS =  -DARM_QEMU -mcpu=arm1176jz-s -ggdb3 
	PLAT_LOADADDR = 0x00010000
else ifeq ($(PLATFORM),arm-bbb)
	PLAT_CFLAGS =  -DARM_BBB -mcpu=cortex-a8 
	PLAT_LOADADDR = 0x81000000
else ifeq ($(PLATFORM),x86-galileo)
	PLAT_CFLAGS =   
endif

TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
XINU		=	$(TOPDIR)/compile/xinu
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUBOOT	=	$(TOPDIR)/compile/xinu.boot
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make
MKVERS		=	$(TOPDIR)/compile/bin/mkvers

MAKEDEP		=	$(CC) -M -MG

DEPSFILE	=	.deps
DEFSFILE	=	.defs
VERSIONFILE	=	version
LDSCRIPT	=	ld.script.${PLATFORM}
REBUILDFLAGS	=	-s $(TOPDIR)/system  debug.c 	\
			-s $(TOPDIR)/system/platform/$(PLATFORM)\
			-s $(TOPDIR)/lib			\
			-s $(TOPDIR)/shell  'xsh_rdstest*'      \
			-s $(TOPDIR)/apps			\

ifeq ($(PLATFORM),arm-qemu)
REBUILDFLAGS 	+=	-s $(TOPDIR)/device/tty			\
			-s $(TOPDIR)/device/nam			\
			-s $(TOPDIR)/device/ram			\
			-s $(TOPDIR)/device/lfs			\
			-s $(TOPDIR)/device/uart		\
			-s $(TOPDIR)/device/uart-pl011		\
			-s $(TOPDIR)/device/loopback		

else ifeq ($(PLATFORM),arm-bbb)
REBUILDFLAGS    +=	-s $(TOPDIR)/device/tty			\
			-s $(TOPDIR)/device/nam			\
			-s $(TOPDIR)/device/eth			\
			-s $(TOPDIR)/device/rds			\
			-s $(TOPDIR)/device/ram			\
			-s $(TOPDIR)/device/lfs			\
			-s $(TOPDIR)/device/rfs			\
			-s $(TOPDIR)/net  'arp_dump*'		\
				'dhcp_dump*'  pxe.c		\

else ifeq ($(PLATFORM),x86-galileo)
endif

INCLUDE		=	-I$(TOPDIR)/include
DEFS		= 	-DBSDURG -DVERSION=\""`cat $(VERSIONFILE)`"\"

# Compiler flags
CFLAGS  =  ${PLAT_CFLAGS} -mno-unaligned-access -marm -fno-builtin -fno-stack-protector -nostdlib -c -Wall -O ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

# Loader flags

LDFLAGS = -dn -m armelf -Map xinu.map -T ld.script.${PLATFORM}

all:	xinu

#--------------------------------------------------------------------------------
# Handle generation of a new version string when initialize is recompiled
#--------------------------------------------------------------------------------

newversion:
	@echo creating new version
	@$(MKVERS) $(PLATFORM) > version

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
-include $(DEFSFILE)

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration.${PLATFORM}
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

xinu:	Makefile rebuild $(BLDDIRS) $(DEFSFILE) $(DEPSFILE) $(CONFH) $(CONFC) $(LD_LIST) uboot-tool/mkimage
	@echo;echo 'Loading object files to produce xinu'
	@$(LD) $(LDFLAGS) $(LD_LIST) -o $(XINU) -L$(LIBGCC_LOC) -lgcc
	@$(OBJCOPY) -O binary $(XINU) $(XINUBIN)
	@./uboot-tool/mkimage -A arm -O linux -T kernel -C none -a $(PLAT_LOADADDR) -e $(PLAT_LOADADDR) -d $(XINUBIN) $(XINUBOOT)

uboot-tool/mkimage: uboot-tool/mkimage.c
	@echo making mkimage
	@(cd uboot-tool; make)

$(BLDDIRS): 
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@make configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@make configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all install

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@make newversion
	@(cd $(TOPDIR)/config; make PLATFORM=$(PLATFORM) install)

clean:
	@echo removing .o files
	@rm -f ${LD_LIST}
	@echo   removing configuration files ...
	@rm -f $(CONFH) $(CONFC)
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xinu ...
	@rm -f $(XINU)
	@rm -f $(XINUBIN)
	@rm -f $(XINUBOOT)
	@rm -f .defs

install: xinu
	cp xinu.boot /tftpboot

etags:
	@(cd $(TOPDIR); find . -name '*.[chS]' -exec etags -a {} \;)

qemu: xinu
	export QEMU_AUDIO_DRV=wav; export QEMU_WAV_PATH=$(TOPDIR)/compile/.wav.wav; qemu-system-arm -M versatilepb -m 512M -nographic -cpu arm1176 -kernel xinu.boot 

qemu-gdb: xinu
		export QEMU_AUDIO_DRV=wav; export QEMU_WAV_PATH=$(TOPDIR)/compile/.wav.wav;qemu-system-arm -M versatilepb -m 512M -nographic -cpu arm1176 -kernel xinu.boot -S -gdb tcp::${GPORT}
#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------

$(DEFSFILE):
	@rm -f $(DEFSFILE)
	@echo "" > $(DEFSFILE)
	@make rebuild

$(DEPSFILE):
	@rm -f $(DEPSFILE)
	@echo "" > $(DEPSFILE)
	@make depend

rebuild: $(CONFC)
	@echo Rebuilding the $(DEFSFILE) file
	@$(BUILDMAKE) $(REBUILDFLAGS) > $(DEFSFILE)

defclean:
	rm -f $(DEFSFILE)
	echo "" > $(DEFSFILE)

depend: $(DEFSFILE)
	@echo;echo Making all dependencies in $(DEPSFILE)
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > $(DEPSFILE)
	@echo;echo Finished making dependencies

depclean:
	rm -f $(DEPSFILE)
	echo "" > $(DEPSFILE)

-include $(DEPSFILE)
